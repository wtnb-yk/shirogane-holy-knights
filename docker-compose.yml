services:
  # LocalStack - AWS サービスのローカル環境
  localstack:
    image: localstack/localstack:latest
    container_name: shirogane-localstack
    ports:
      - "4567:4566"
    environment:
      - DEBUG=1
      - LAMBDA_EXECUTOR=local
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST_TMP_FOLDER=${TMPDIR:-/tmp}/localstack
      - EXTRA_CORS_ALLOWED_ORIGINS=http://localhost:3001
      - LAMBDA_RUNTIME_ENVIRONMENT_TIMEOUT=60
      - LAMBDA_KEEPALIVE_MS=600000
      - LAMBDA_RUNTIME_EXECUTOR=docker-reuse
      - LAMBDA_JAVA_OPTS=-XX:+TieredCompilation -XX:TieredStopAtLevel=1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${TMPDIR:-/tmp}/localstack:/var/lib/localstack"
    networks:
      - shirogane-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localstack:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # PostgreSQLデータベース
  postgres:
    image: postgres:14
    container_name: shirogane-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: shirogane
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - shirogane-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Liquibase マイグレーション
  liquibase:
    image: liquibase/liquibase:4.24
    container_name: shirogane-liquibase
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/src/main/resources/db/changelog:/liquibase/changelog
    command: >
      liquibase
      --url=jdbc:postgresql://postgres:5432/shirogane
      --username=postgres
      --password=postgres
      --changeLogFile=changelog/changelog.xml
      update
    networks:
      - shirogane-network

  # Lambda環境 (LocalStack)
  backend-lambda:
    build:
      context: ./backend
    container_name: shirogane-backend-lambda
    depends_on:
      localstack:
        condition: service_healthy
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-northeast-1
      - LOCALSTACK_ENDPOINT=http://localstack:4566
    volumes:
      - ./backend/build/libs:/app/build/libs
      - ./backend/build/hot:/app/build/hot
      - ./backend/src:/app/src
      - ./backend/build.gradle.kts:/app/build.gradle.kts
      - ./scripts:/scripts
      - ./frontend:/frontend
    command: ["bash", "-c", "cd /app && bash /scripts/setup-lambda.sh && bash /scripts/create-api-gateway.sh && tail -f /dev/null"]
    networks:
      - shirogane-network

  # フロントエンドサービス
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: shirogane-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-northeast-1
    depends_on:
      backend-lambda:
        condition: service_started
    command: >
      sh -c "
        echo 'API Gateway設定完了を待機中...' &&
        sleep 15 &&
        echo 'API IDを取得中...' &&
        API_ID=\$$(aws --endpoint-url=http://localstack:4566 apigateway get-rest-apis --query 'items[0].id' --output text 2>/dev/null) &&
        if [ -z \"\$$API_ID\" ] || [ \"\$$API_ID\" = \"None\" ]; then
          echo 'API ID取得に失敗しました。デフォルトURLを使用します。' &&
          export NEXT_PUBLIC_API_URL=http://localhost:4567
        else
          export NEXT_PUBLIC_API_URL=http://localhost:4567/restapis/\$$API_ID/dev/_user_request_ &&
          echo \"フロントエンドAPI URL: \$$NEXT_PUBLIC_API_URL\"
        fi &&
        pnpm run dev
      "
    networks:
      - shirogane-network
    healthcheck:
      test: curl -f http://localhost:3000 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

# ボリューム定義
volumes:
  postgres-data:
    driver: local

# ネットワーク定義
networks:
  shirogane-network:
    driver: bridge
