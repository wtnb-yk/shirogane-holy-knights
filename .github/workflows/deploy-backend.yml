name: Trigger CodePipeline

run-name: Trigger CodePipeline (${{ github.event.inputs.environment }})

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          # - prod  # 将来のprod環境対応時にコメントアウト解除
  push:
    branches:
      - main

jobs:
  trigger-pipeline:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::975069893654:role/GitHubActionsDeployRole
          aws-region: ap-northeast-1

      - name: Trigger CodePipeline
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          PIPELINE_NAME="shirogane-holy-knights-${ENVIRONMENT}-pipeline"
          
          echo "Triggering CodePipeline: $PIPELINE_NAME"
          
          # CodePipelineの実行を開始
          EXECUTION_ID=$(aws codepipeline start-pipeline-execution \
            --name "$PIPELINE_NAME" \
            --query 'pipelineExecutionId' \
            --output text)
          
          echo "Pipeline execution started with ID: $EXECUTION_ID"
          echo "Monitor progress at: https://console.aws.amazon.com/codesuite/codepipeline/pipelines/$PIPELINE_NAME/view"

      - name: Wait for pipeline completion (optional)
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          PIPELINE_NAME="shirogane-holy-knights-${ENVIRONMENT}-pipeline"
          
          echo "Monitoring pipeline execution..."
          
          # パイプラインの状態を監視（最大30分）
          for i in {1..60}; do
            STATUS=$(aws codepipeline get-pipeline-state \
              --name "$PIPELINE_NAME" \
              --query 'stageStates[0].latestExecution.status' \
              --output text)
            
            echo "Pipeline status: $STATUS"
            
            if [ "$STATUS" = "Succeeded" ]; then
              echo "✅ Pipeline completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Pipeline failed!"
              exit 1
            fi
            
            sleep 30
          done
