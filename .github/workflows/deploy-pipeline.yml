name: Deploy Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

concurrency:
  group: deploy-${{ github.event.inputs.environment || 'dev' }}
  cancel-in-progress: false

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  backend-build:
    name: Build Backend
    runs-on: ubuntu-latest
    outputs:
      jar-artifact: backend-jar-${{ github.sha }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Lambda JAR
      run: |
        cd backend
        chmod +x gradlew
        ./gradlew springCloudFunctionLambdaJar

    - name: Upload JAR artifact
      id: artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar-${{ github.sha }}
        path: backend/build/libs/*-aws-lambda.jar
        retention-days: 1

  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [backend-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
        aws-region: ap-northeast-1

    - name: Download backend JAR
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.backend-build.outputs.jar-artifact }}
        path: backend/build/libs

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Plan
      run: |
        cd infrastructure/terraform/environments/${{ env.ENVIRONMENT }}
        terraform init \
          -backend-config="bucket=shirogane-holy-knights-terraform-state" \
          -backend-config="key=env/${{ env.ENVIRONMENT }}/terraform.tfstate" \
          -backend-config="region=ap-northeast-1" \
          -backend-config="dynamodb_table=shirogane-holy-knights-terraform-locks"
        terraform plan

  deploy-lambda:
    name: Deploy Lambda
    runs-on: ubuntu-latest
    needs: [backend-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
        aws-region: ap-northeast-1

    - name: Download backend JAR
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.backend-build.outputs.jar-artifact }}
        path: backend/build/libs

    - name: Deploy to Lambda
      run: |
        FUNCTION_NAME="shirogane-holy-knights-${{ env.ENVIRONMENT }}-api"
        JAR_FILE=$(find backend/build/libs -name "*-aws-lambda.jar" | head -1)
        
        aws lambda update-function-code \
          --function-name $FUNCTION_NAME \
          --zip-file fileb://$JAR_FILE \
          --region ap-northeast-1
        
        aws lambda wait function-updated \
          --function-name $FUNCTION_NAME \
          --region ap-northeast-1

  trigger-amplify:
    name: Trigger Amplify Deploy
    runs-on: ubuntu-latest
    needs: [frontend-build, deploy-lambda]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
        aws-region: ap-northeast-1

    - name: Trigger Amplify deployment
      run: |
        APP_ID=$(aws amplify list-apps --query "apps[?name=='shirogane-holy-knights-${{ env.ENVIRONMENT }}'].appId" --output text)
        BRANCH_NAME="${{ env.ENVIRONMENT == 'prod' && 'main' || 'develop' }}"
        
        if [ -n "$APP_ID" ]; then
          aws amplify start-job \
            --app-id $APP_ID \
            --branch-name $BRANCH_NAME \
            --job-type RELEASE
        fi

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-lambda, trigger-amplify]
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Environment: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Components Deployed:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Backend JAR built" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Frontend built" >> $GITHUB_STEP_SUMMARY
        echo "- ${{ needs.deploy-lambda.result == 'success' && '✅' || '❌' }} Lambda function updated" >> $GITHUB_STEP_SUMMARY
        echo "- ${{ needs.trigger-amplify.result == 'success' && '✅' || '❌' }} Amplify deployment triggered" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Git Information:" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY