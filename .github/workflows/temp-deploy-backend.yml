name: Temp Deploy Backend

run-name: Temp Deploy Backend (${{ github.event.inputs.environment }})

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prd

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper

      - name: Build Lambda JAR
        run: |
          cd backend
          ./gradlew springCloudFunctionLambdaJar
          ls -la build/libs/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::975069893654:role/GitHubActionsDeployRole
          aws-region: ap-northeast-1

      - name: Deploy to Lambda
        run: |
          FUNCTION_NAME="shirogane-holy-knights-${{ github.event.inputs.environment }}-api"
          JAR_PATH="backend/build/libs/shirogane-holy-knights-0.1.0-aws-lambda.jar"
          
          echo "Deploying to Lambda function: $FUNCTION_NAME"
          
          # Lambda関数の存在確認
          if aws lambda get-function --function-name "$FUNCTION_NAME" >/dev/null 2>&1; then
            echo "Lambda function exists, updating code..."
          
            # 関数コードの更新
            aws lambda update-function-code \
              --function-name "$FUNCTION_NAME" \
              --zip-file "fileb://$JAR_PATH"
          
            # 更新完了まで待機
            aws lambda wait function-updated \
              --function-name "$FUNCTION_NAME"
          
            echo "Lambda function updated successfully"
            
            # 新しいバージョンをPublish
            echo "Publishing new version..."
            NEW_VERSION=$(aws lambda publish-version \
              --function-name "$FUNCTION_NAME" \
              --query 'Version' \
              --output text)
            
            echo "Published version: $NEW_VERSION"

            # Spring Boot初期化待機時間
            echo "⏳ Waiting 90 seconds for Spring Boot initialization..."
            sleep 90

            # Aliasを新しいバージョンに更新
            echo "Updating alias 'live' to version $NEW_VERSION..."
            aws lambda update-alias \
              --function-name "$FUNCTION_NAME" \
              --name "live" \
              --function-version "$NEW_VERSION"
            
            echo "✅ Alias 'live' updated to version $NEW_VERSION (SnapStart enabled)"
          else
            echo "❌ Lambda function $FUNCTION_NAME not found"
            echo "Please create the infrastructure using Terraform first"
            exit 1
          fi

      - name: Verify deployment
        run: |
          FUNCTION_NAME="shirogane-holy-knights-${{ github.event.inputs.environment }}-api"
          
          # 関数情報の取得
          aws lambda get-function --function-name "$FUNCTION_NAME" \
            --query 'Configuration.{FunctionName:FunctionName,Runtime:Runtime,LastModified:LastModified,CodeSize:CodeSize}' \
            --output table
          
          echo "✅ Deployment completed successfully to ${{ github.event.inputs.environment }} environment"
